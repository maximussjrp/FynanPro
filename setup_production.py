#!/usr/bin/env python3
"""
Script de configura√ß√£o para produ√ß√£o
Executa todas as migra√ß√µes e verifica o estado do sistema
"""

import os
import sys
import logging
from datetime import datetime

# Setup de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('production_setup.log', mode='w')
    ]
)
logger = logging.getLogger(__name__)

def main():
    """Fun√ß√£o principal de setup"""
    try:
        logger.info("üöÄ INICIANDO SETUP DE PRODU√á√ÉO")
        logger.info(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
        logger.info(f"üêç Python: {sys.version}")
        logger.info(f"üìÇ Diret√≥rio: {os.getcwd()}")
        
        # 1. SECRET_KEY
        logger.info("\n1Ô∏è‚É£ CONFIGURANDO SECRET_KEY")
        setup_secret_key()
        
        # 2. Migra√ß√µes
        logger.info("\n2Ô∏è‚É£ EXECUTANDO MIGRA√á√ïES")
        success = run_migrations()
        
        # 3. Verifica√ß√£o final
        logger.info("\n3Ô∏è‚É£ VERIFICA√á√ÉO FINAL")
        verify_setup()
        
        if success:
            logger.info("‚úÖ SETUP CONCLU√çDO COM SUCESSO!")
            return True
        else:
            logger.error("‚ùå SETUP FALHOU!")
            return False
            
    except Exception as e:
        logger.error(f"üö® ERRO NO SETUP: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def setup_secret_key():
    """Configurar SECRET_KEY"""
    try:
        # Verificar se j√° existe
        secret_key = os.environ.get('SECRET_KEY')
        if secret_key:
            logger.info(f"‚úÖ SECRET_KEY j√° existe (tamanho: {len(secret_key)})")
            return True
            
        # Gerar nova chave
        import secrets
        new_key = secrets.token_urlsafe(32)
        os.environ['SECRET_KEY'] = new_key
        
        # Salvar em arquivo .env se n√£o existir
        env_file = '.env'
        if not os.path.exists(env_file):
            with open(env_file, 'w') as f:
                f.write(f"SECRET_KEY={new_key}\n")
            logger.info("‚úÖ SECRET_KEY gerada e salva em .env")
        else:
            logger.info("‚úÖ SECRET_KEY gerada (arquivo .env j√° existe)")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar SECRET_KEY: {e}")
        return False

def run_migrations():
    """Executar todas as migra√ß√µes"""
    try:
        # Importar sistema de migra√ß√£o
        from migrations import run_all_migrations
        
        logger.info("üîÑ Iniciando migra√ß√µes...")
        success = run_all_migrations()
        
        if success:
            logger.info("‚úÖ Migra√ß√µes executadas com sucesso!")
        else:
            logger.error("‚ùå Erro nas migra√ß√µes!")
            
        return success
        
    except ImportError as e:
        logger.error(f"‚ùå Erro ao importar sistema de migra√ß√£o: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro nas migra√ß√µes: {e}")
        return False

def verify_setup():
    """Verificar se o setup est√° correto"""
    try:
        import sqlite3
        
        # Verificar banco de dados
        db_path = 'finance_planner.db'
        if os.path.exists(db_path):
            logger.info(f"‚úÖ Banco de dados existe: {db_path}")
            
            # Verificar estrutura
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # Verificar tabelas principais
            tables = ['accounts', 'transactions', 'categories', 'schema_migrations']
            for table in tables:
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
                if cursor.fetchone():
                    logger.info(f"‚úÖ Tabela '{table}' existe")
                else:
                    logger.warning(f"‚ö†Ô∏è  Tabela '{table}' n√£o encontrada")
            
            # Verificar coluna balance em accounts
            cursor.execute("PRAGMA table_info(accounts)")
            columns = [row[1] for row in cursor.fetchall()]
            if 'balance' in columns:
                logger.info("‚úÖ Coluna 'balance' existe na tabela accounts")
            else:
                logger.warning("‚ö†Ô∏è  Coluna 'balance' n√£o encontrada na tabela accounts")
            
            # Verificar coluna transaction_type em transactions
            cursor.execute("PRAGMA table_info(transactions)")
            columns = [row[1] for row in cursor.fetchall()]
            if 'transaction_type' in columns:
                logger.info("‚úÖ Coluna 'transaction_type' existe na tabela transactions")
            else:
                logger.warning("‚ö†Ô∏è  Coluna 'transaction_type' n√£o encontrada na tabela transactions")
            
            # Verificar migra√ß√µes executadas
            cursor.execute("SELECT migration FROM schema_migrations ORDER BY migration")
            executed_migrations = [row[0] for row in cursor.fetchall()]
            logger.info(f"‚úÖ Migra√ß√µes executadas: {executed_migrations}")
            
            conn.close()
            
        else:
            logger.warning(f"‚ö†Ô∏è  Banco de dados n√£o encontrado: {db_path}")
        
        # Verificar SECRET_KEY
        secret_key = os.environ.get('SECRET_KEY')
        if secret_key:
            logger.info(f"‚úÖ SECRET_KEY configurada (tamanho: {len(secret_key)})")
        else:
            logger.warning("‚ö†Ô∏è  SECRET_KEY n√£o encontrada")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
