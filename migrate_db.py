import sqlite3
from datetime import datetime, timedelta

def migrate_database():
    conn = sqlite3.connect('finance_planner_saas.db')
    cursor = conn.cursor()
    
    try:
        # Adicionar novas colunas se n√£o existirem
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN plan_type TEXT DEFAULT 'trial'")
            print("Coluna plan_type adicionada")
        except sqlite3.OperationalError:
            print("Coluna plan_type j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN plan_start_date DATETIME")
            print("Coluna plan_start_date adicionada")
        except sqlite3.OperationalError:
            print("Coluna plan_start_date j√° existe")
        
        # Adicionar colunas de pagamento
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN stripe_customer_id TEXT")
            print("Coluna stripe_customer_id adicionada")
        except sqlite3.OperationalError:
            print("Coluna stripe_customer_id j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN stripe_subscription_id TEXT")
            print("Coluna stripe_subscription_id adicionada")
        except sqlite3.OperationalError:
            print("Coluna stripe_subscription_id j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN payment_method TEXT DEFAULT 'free'")
            print("Coluna payment_method adicionada")
        except sqlite3.OperationalError:
            print("Coluna payment_method j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN last_payment_date DATETIME")
            print("Coluna last_payment_date adicionada")
        except sqlite3.OperationalError:
            print("Coluna last_payment_date j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN total_paid REAL DEFAULT 0.0")
            print("Coluna total_paid adicionada")
        except sqlite3.OperationalError:
            print("Coluna total_paid j√° existe")
        
        # Criar tabela de mensagens de chat
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS chat_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                message TEXT NOT NULL,
                sender TEXT NOT NULL,
                is_read BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        print("Tabela chat_messages criada ou j√° existe")
        
        # Criar tabela de respostas r√°pidas
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quick_replies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT UNIQUE NOT NULL,
                response TEXT NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("Tabela quick_replies criada ou j√° existe")
        
        # Criar tabela de agentes de suporte
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS support_agents (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME
            )
        ''')
        print("Tabela support_agents criada ou j√° existe")
        
        # Adicionar coluna replied_by_agent_id na tabela chat_messages se n√£o existir
        try:
            cursor.execute("ALTER TABLE chat_messages ADD COLUMN replied_by_agent_id INTEGER")
            print("Coluna replied_by_agent_id adicionada √† tabela chat_messages")
        except sqlite3.OperationalError:
            print("Coluna replied_by_agent_id j√° existe na tabela chat_messages")
        
        # Inserir respostas r√°pidas padr√£o
        default_replies = [
            # Respostas sobre planos e pagamentos
            ('plano', 'Temos planos a partir de R$ 9,90/m√™s! Acesse "Planos" no menu para ver todas as op√ß√µes. üòä'),
            ('pagamento', 'Aceitamos cart√£o de cr√©dito via Stripe e PIX. Todos os pagamentos s√£o seguros. Precisa de ajuda com algum pagamento?'),
            ('teste', 'Voc√™ tem 7 dias gr√°tis para testar todas as funcionalidades premium! Quer come√ßar seu teste agora?'),
            ('cancelar', 'Para cancelar sua assinatura, acesse seu perfil e clique em "Gerenciar Plano". Voc√™ pode cancelar a qualquer momento sem multas.'),
            ('suporte', 'Conectando voc√™ com um atendente humano... Por favor, aguarde ou envie um email para suporte@financesaas.com'),
            
            # Respostas sobre funcionalidades do sistema
            ('lan√ßamento', 'Para adicionar uma transa√ß√£o: 1) Clique em "Nova Transa√ß√£o" no menu, 2) Preencha descri√ß√£o, valor e categoria, 3) Escolha se √© receita ou despesa. √â bem simples! üí∞'),
            ('transa√ß√£o', 'Para gerenciar suas transa√ß√µes: Acesse "Transa√ß√µes" no menu para ver hist√≥rico, editar ou excluir lan√ßamentos. Voc√™ pode filtrar por per√≠odo e categoria! üìä'),
            ('categoria', 'As categorias organizam seus gastos! Acesse "Categorias" no menu para criar novas ou editar existentes. Temos categorias pr√©-definidas como Alimenta√ß√£o, Transporte, etc. üè∑Ô∏è'),
            ('relat√≥rio', 'Seus relat√≥rios est√£o em "Indicadores" e "Sa√∫de Financeira". Veja gr√°ficos de gastos por categoria, evolu√ß√£o mensal e dicas personalizadas! üìà'),
            ('dashboard', 'O Dashboard mostra seu resumo financeiro: saldo atual, receitas e despesas do m√™s, e principais categorias de gastos. √â sua vis√£o geral das finan√ßas! üìã'),
            
            # Respostas sobre uso espec√≠fico
            ('como usar', 'Acesse o Dashboard para ver seu resumo financeiro. Use "Nova Transa√ß√£o" para adicionar receitas/despesas e "Categorias" para organizar seus gastos.'),
            ('receita', 'Para lan√ßar uma receita: 1) Nova Transa√ß√£o ‚Üí 2) Escolha "Receita" ‚Üí 3) Digite valor e descri√ß√£o ‚Üí 4) Selecione categoria (Sal√°rio, Freelance, etc.) ‚Üí 5) Salvar! üíö'),
            ('despesa', 'Para lan√ßar uma despesa: 1) Nova Transa√ß√£o ‚Üí 2) Escolha "Despesa" ‚Üí 3) Digite valor e descri√ß√£o ‚Üí 4) Selecione categoria (Alimenta√ß√£o, Transporte, etc.) ‚Üí 5) Salvar! ‚ùå'),
            ('saldo', 'Seu saldo √© calculado automaticamente: Receitas - Despesas = Saldo atual. Veja no Dashboard ou em Indicadores para an√°lise detalhada! üí∞'),
            
            # Respostas sobre problemas t√©cnicos
            ('erro', 'Se est√° com problemas t√©cnicos: 1) Atualize a p√°gina (F5), 2) Limpe cache do navegador, 3) Tente outro navegador. Se persistir, nos contate! üîß'),
            ('login', 'Problemas de login? Verifique email/senha, tente recuperar senha ou limpe cookies do navegador. Precisa de ajuda espec√≠fica? üîê'),
            ('lento', 'Se o sistema est√° lento: Verifique sua conex√£o, feche outras abas e limpe cache. Nossos servidores est√£o sempre otimizados! ‚ö°'),
            
            # Respostas sobre recursos premium
            ('gratuito', 'No plano gratuito voc√™ tem: at√© 50 transa√ß√µes/m√™s, categorias b√°sicas e relat√≥rios simples. Planos pagos t√™m recursos ilimitados! üÜì'),
            ('premium', 'Recursos premium incluem: transa√ß√µes ilimitadas, categorias personalizadas, relat√≥rios avan√ßados, metas financeiras e backup autom√°tico! ‚≠ê'),
            ('limite', 'No plano gratuito h√° limite de 50 transa√ß√µes/m√™s. Para uso ilimitado, considere nossos planos a partir de R$ 9,90/m√™s! üìä'),
            
            # Respostas sobre seguran√ßa
            ('seguran√ßa', 'Seus dados est√£o seguros! Usamos criptografia SSL, senhas hasheadas e servidores protegidos. Nunca compartilhamos informa√ß√µes pessoais! üîí'),
            ('dados', 'Respeitamos sua privacidade: dados criptografados, sem venda para terceiros, backup seguro e conformidade com LGPD! üõ°Ô∏è'),
            ('backup', 'Fazemos backup autom√°tico dos seus dados. Planos premium incluem backup di√°rio e recupera√ß√£o f√°cil! üíæ')
        ]
        
        for keyword, response in default_replies:
            try:
                cursor.execute('''
                    INSERT OR IGNORE INTO quick_replies (keyword, response) 
                    VALUES (?, ?)
                ''', (keyword, response))
                print(f"Resposta r√°pida '{keyword}' adicionada")
            except sqlite3.Error as e:
                print(f"Erro ao adicionar resposta '{keyword}': {e}")
        
        # Criar agente de suporte padr√£o se n√£o existir
        import bcrypt
        
        # Verificar se j√° existe algum agente
        cursor.execute("SELECT COUNT(*) FROM support_agents")
        agent_count = cursor.fetchone()[0]
        
        if agent_count == 0:
            # Criar agente padr√£o
            default_password = "suporte123"
            password_hash = bcrypt.hashpw(default_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            try:
                cursor.execute('''
                    INSERT INTO support_agents (name, email, password_hash) 
                    VALUES (?, ?, ?)
                ''', ("Agente Suporte", "suporte@financesaas.com", password_hash))
                print("‚úÖ Agente de suporte padr√£o criado:")
                print("   Email: suporte@financesaas.com")
                print("   Senha: suporte123")
                print("   ‚ö†Ô∏è  ALTERE ESTA SENHA AP√ìS O PRIMEIRO LOGIN!")
            except sqlite3.Error as e:
                print(f"Erro ao criar agente padr√£o: {e}")
        else:
            print(f"J√° existem {agent_count} agentes de suporte cadastrados")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN plan_end_date DATETIME")
            print("Coluna plan_end_date adicionada")
        except sqlite3.OperationalError:
            print("Coluna plan_end_date j√° existe")
        
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN trial_used BOOLEAN DEFAULT 0")
            print("Coluna trial_used adicionada")
        except sqlite3.OperationalError:
            print("Coluna trial_used j√° existe")
        
        # Atualizar usu√°rios existentes para ter per√≠odo de teste
        now = datetime.now()
        trial_end = now + timedelta(days=7)
        
        cursor.execute("""
            UPDATE users 
            SET plan_type = 'trial',
                plan_start_date = ?,
                plan_end_date = ?,
                trial_used = 1
            WHERE plan_type IS NULL OR plan_type = ''
        """, (now.isoformat(), trial_end.isoformat()))
        
        print(f"Atualizados {cursor.rowcount} usu√°rios para per√≠odo de teste")
        
        conn.commit()
        print("Migra√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        conn.rollback()
        print(f"Erro na migra√ß√£o: {str(e)}")
    finally:
        conn.close()

if __name__ == '__main__':
    migrate_database()
